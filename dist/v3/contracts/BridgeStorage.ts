/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ChainFeeStruct = { chain: string; fee: BigNumberish };

export type ChainFeeStructOutput = [chain: string, fee: bigint] & {
  chain: string;
  fee: bigint;
};

export type SignerAndSignatureStruct = {
  publicAddress: AddressLike;
  signature: string;
};

export type SignerAndSignatureStructOutput = [
  publicAddress: string,
  signature: string
] & { publicAddress: string; signature: string };

export interface BridgeStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveLockNft"
      | "approveStake"
      | "chainEpoch"
      | "chainFee"
      | "chainFeeVoted"
      | "chainFeeVotes"
      | "changeChainFee"
      | "changeValidatorStatus"
      | "getLockNftSignatures"
      | "getLockNftSignaturesCount"
      | "getStakingSignatures"
      | "getStakingSignaturesCount"
      | "lockSignatures"
      | "stakingSignatures"
      | "usedSignatures"
      | "validatorCount"
      | "validatorEpoch"
      | "validatorStatusChangeVotes"
      | "validatorVoted"
      | "validators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveLockNft",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveStake",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "chainEpoch", values: [string]): string;
  encodeFunctionData(functionFragment: "chainFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "chainFeeVoted",
    values: [string, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainFeeVotes",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeChainFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeValidatorStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockNftSignatures",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockNftSignaturesCount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingSignatures",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingSignaturesCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSignatures",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingSignatures",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usedSignatures",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorEpoch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorStatusChangeVotes",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorVoted",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveLockNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainFeeVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainFeeVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeChainFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeValidatorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockNftSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockNftSignaturesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingSignaturesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorStatusChangeVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
}

export interface BridgeStorage extends BaseContract {
  connect(runner?: ContractRunner | null): BridgeStorage;
  waitForDeployment(): Promise<this>;

  interface: BridgeStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveLockNft: TypedContractMethod<
    [_transactionHash: string, _chain: string, _signature: string],
    [void],
    "nonpayable"
  >;

  approveStake: TypedContractMethod<
    [_stakerAddress: AddressLike, _signature: string],
    [void],
    "nonpayable"
  >;

  chainEpoch: TypedContractMethod<[arg0: string], [bigint], "view">;

  chainFee: TypedContractMethod<[arg0: string], [bigint], "view">;

  chainFeeVoted: TypedContractMethod<
    [arg0: string, arg1: BigNumberish, arg2: AddressLike, arg3: BigNumberish],
    [boolean],
    "view"
  >;

  chainFeeVotes: TypedContractMethod<
    [arg0: string, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  changeChainFee: TypedContractMethod<
    [_chain: string, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeValidatorStatus: TypedContractMethod<
    [_validatorAddress: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  getLockNftSignatures: TypedContractMethod<
    [transactionHash: string, chain: string],
    [SignerAndSignatureStructOutput[]],
    "view"
  >;

  getLockNftSignaturesCount: TypedContractMethod<
    [transactionHash: string, chain: string],
    [bigint],
    "view"
  >;

  getStakingSignatures: TypedContractMethod<
    [stakerAddress: AddressLike],
    [SignerAndSignatureStructOutput[]],
    "view"
  >;

  getStakingSignaturesCount: TypedContractMethod<
    [stakerAddress: AddressLike],
    [bigint],
    "view"
  >;

  lockSignatures: TypedContractMethod<
    [arg0: string, arg1: string, arg2: BigNumberish],
    [[string, string] & { publicAddress: string; signature: string }],
    "view"
  >;

  stakingSignatures: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, string] & { publicAddress: string; signature: string }],
    "view"
  >;

  usedSignatures: TypedContractMethod<[arg0: string], [boolean], "view">;

  validatorCount: TypedContractMethod<[], [bigint], "view">;

  validatorEpoch: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  validatorStatusChangeVotes: TypedContractMethod<
    [arg0: AddressLike, arg1: boolean, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  validatorVoted: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  validators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveLockNft"
  ): TypedContractMethod<
    [_transactionHash: string, _chain: string, _signature: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveStake"
  ): TypedContractMethod<
    [_stakerAddress: AddressLike, _signature: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chainEpoch"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainFee"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainFeeVoted"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish, arg2: AddressLike, arg3: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "chainFeeVotes"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeChainFee"
  ): TypedContractMethod<
    [_chain: string, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeValidatorStatus"
  ): TypedContractMethod<
    [_validatorAddress: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLockNftSignatures"
  ): TypedContractMethod<
    [transactionHash: string, chain: string],
    [SignerAndSignatureStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLockNftSignaturesCount"
  ): TypedContractMethod<
    [transactionHash: string, chain: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakingSignatures"
  ): TypedContractMethod<
    [stakerAddress: AddressLike],
    [SignerAndSignatureStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakingSignaturesCount"
  ): TypedContractMethod<[stakerAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockSignatures"
  ): TypedContractMethod<
    [arg0: string, arg1: string, arg2: BigNumberish],
    [[string, string] & { publicAddress: string; signature: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakingSignatures"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, string] & { publicAddress: string; signature: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "usedSignatures"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "validatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validatorEpoch"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "validatorStatusChangeVotes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: boolean, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorVoted"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  filters: {};
}
