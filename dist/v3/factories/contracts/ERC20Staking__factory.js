"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC20Staking__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_stakingAmount",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "_ERC20Token",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "user",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "Staked",
        type: "event",
    },
    {
        inputs: [],
        name: "ERC20Token",
        outputs: [
            {
                internalType: "contract IERC20",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "stakeERC20",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "stakingAmount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "stakingBalances",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x60803461007e57601f61030f38819003918201601f19168301916001600160401b0383118484101761008357808492604094855283398101031261007e5780516020909101516001600160a01b038116919082900361007e57600055600180546001600160a01b031916919091179055604051610275908161009a8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182633b22d224146100d65750816361b8b5dc1461009857508063739a3e021461007c57637a80760e1461005157600080fd5b3461007857816003193601126100785760015490516001600160a01b039091168152602090f35b5080fd5b5034610078578160031936011261007857602091549051908152f35b9050346100d25760203660031901126100d257356001600160a01b038116908190036100d257828291602094526002845220549051908152f35b8280fd5b838591346100d257826003193601126100d25733835260209060028252828420546102065750828160018060a01b036001541660648354865194859384926323b872dd60e01b8452338c85015230602485015260448401525af180156101f957610198575b50825433845260028252828420805491820180921161018557558254915191825233917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9190a280f35b634e487b7160e01b855260118652602485fd5b813d83116101f2575b601f8101601f1916820167ffffffffffffffff8111838210176101df57839183918652810103126101db5751801515036100d2578461013b565b8380fd5b634e487b7160e01b865260418752602486fd5b503d6101a1565b50505051903d90823e3d90fd5b6064918562461bcd60e51b83528201526017602482015276596f752063616e206f6e6c79207374616b65206f6e636560481b6044820152fdfea2646970667358221220761f87befd06557e2d9514c373c6f3c7449a7d2fc0523a77a373c82e2b68a8b064736f6c63430008150033";
const isSuperArgs = (xs) => xs.length > 1;
class ERC20Staking__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(_stakingAmount, _ERC20Token, overrides) {
        return super.deploy(_stakingAmount, _ERC20Token, overrides || {});
    }
    getDeployTransaction(_stakingAmount, _ERC20Token, overrides) {
        return super.getDeployTransaction(_stakingAmount, _ERC20Token, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.ERC20Staking__factory = ERC20Staking__factory;
ERC20Staking__factory.bytecode = _bytecode;
ERC20Staking__factory.abi = _abi;
